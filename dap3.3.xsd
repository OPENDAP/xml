<?xml version="1.0" encoding="UTF-8"?>
<!-- DAP 3.3 introduces SharedDimension, Group, Opaque, 64-bit integers and
	UnsignedByte. In addition: The syntax for Array has been changed so that
	it's easier for processing software to figure out the type of an array; 
	Grids have been generalized so that there can be any number of 'Array'
	parts (and the Maps may be multi-dimensional; and OtherXML has been renamed
	AnyXML and made its own element (it's no longer a type of 'Attribute'). 
	
	The change to otherXML was made to simplify writing the schema since it
	appears schema 1.0 cannot reprsent a syntax where the type of an element 
	is a function of the value of one of its attributes.
	jhrg 10/13/09 -->

<xs:schema
	targetNamespace="http://xml.opendap.org/ns/DAP/3.3#"
	xmlns:dap3.3="http://xml.opendap.org/ns/DAP/3.3#" xmlns="http://xml.opendap.org/ns/DAP/3.3#"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.w3.org/2001/XMLSchema http://www.w3.org/2001/XMLSchema.xsd"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xs:element name="Dataset" type="DAP_Dataset"/>
	<xs:element name="Attribute" type="DAP_Attribute"/>
	<xs:element name="Alias" type="AttributeAlias"/>

	<xs:element name="Byte" type="BaseType"/>
	<xs:element name="SignedByte" type="BaseType"/>

	<xs:element name="Int16" type="BaseType"/>
	<xs:element name="UInt16" type="BaseType"/>

	<xs:element name="Int32" type="BaseType"/>
	<xs:element name="UInt32" type="BaseType"/>

	<xs:element name="Int64" type="BaseType"/>
	<xs:element name="UInt64" type="BaseType"/>

	<xs:element name="Float32" type="BaseType"/>
	<xs:element name="Float64" type="BaseType"/>

	<xs:element name="String" type="BaseType"/>
	<xs:element name="Url" type="BaseType"/>

	<xs:element name="Array" type="Array"/>

	<xs:element name="Grid" type="Grid"/>
	<xs:element name="Map" type="MapType"/>

	<xs:element name="Structure" type="Structure"/>
	<xs:element name="Sequence" type="Sequence"/>

	<!-- An Opaque variable only declares its name. Size for an instance of
		Opaque will be sent as a prefix to that actual data, just as with a
		String or URL. -->
	<xs:element name="Opaque" type="BaseType"/>

	<xs:element name="SharedDimension" type="SharedDimension"/>
	<xs:element name="Group" type="Group"/>

	<xs:element name="AnyXML" type="AnyXMLType"/>

	<xs:element name="blob" type="BLOB"/>


	<xs:group name="VariableTypes">
		<xs:annotation>
			<xs:documentation>DAP Variable Types</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element ref="Byte" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="SignedByte" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Int16" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="UInt16" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Int32" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="UInt32" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Int64" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="UInt64" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Float32" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Float64" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="String" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Url" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Array" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Grid" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Structure" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Sequence" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Opaque" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:group>


	<xs:complexType name="DAP_Dataset">
		<xs:annotation>
			<xs:documentation>This is the XML representation of a DAP DDS object.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Alias" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="AnyXML" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Group" minOccurs="1" maxOccurs="unbounded"/>
			<xs:element ref="blob" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="dapVersion" type="xs:string" use="required"/>
	</xs:complexType>


	<xs:complexType name="Group">
		<xs:annotation>
			<xs:documentation>A Group is a lexical scoping tool used to replicate HDF5 and netCDF4
				Groups. Each Group defines a lexical scope. Each dataset has at least one Group; if
				only one is present, it may be anonymous. In this case, by convention, it's name
				attribute should be 'anonymous'.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Alias" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="AnyXML" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="SharedDimension" minOccurs="0" maxOccurs="unbounded"/>
			<xs:group ref="VariableTypes" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" default="anonymous"/>
	</xs:complexType>

	<xs:complexType name="SharedDimension">
		<xs:annotation>
			<xs:documentation>This holds a dimension, a name and size, that may be shared between
				Grids and/or Arrays. SharedDimensions are lexically scoped.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="size" type="xs:integer" use="required"/>
	</xs:complexType>


	<xs:complexType name="DAP_Attribute">
		<xs:annotation>
			<xs:documentation>DAP Attribute Type</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:sequence>
				<xs:element name="value" type="xs:string" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:sequence>
				<xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="Alias" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="type" type="AttributeType" use="required"/>
		<xs:attribute name="namespace" type="xs:string" use="optional"/>
	</xs:complexType>


	<xs:complexType name="AttributeAlias">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="Attribute" type="xs:string" use="required"/>
	</xs:complexType>


	<xs:simpleType name="AttributeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Byte"/>
			<xs:enumeration value="SignedByte"/>
			<xs:enumeration value="Int16"/>
			<xs:enumeration value="UInt16"/>
			<xs:enumeration value="Int32"/>
			<xs:enumeration value="UInt32"/>
			<xs:enumeration value="Int64"/>
			<xs:enumeration value="UInt64"/>
			<xs:enumeration value="Float32"/>
			<xs:enumeration value="Float64"/>
			<xs:enumeration value="String"/>
			<xs:enumeration value="URL"/>
			<xs:enumeration value="Container"/>
			<!--xs:enumeration value="OtherXML"/ Replaced by AnyXML. -->
		</xs:restriction>
	</xs:simpleType>


	<xs:complexType name="AnyXMLType">
		<xs:annotation>
			<xs:documentation>When we want to embed arbitrary XML in a DDX use this node. This
				functions like an attribute and appear in the same general place as an attribute,
				but its contents are ignored by DAP software. Other software might find the
				information useful. </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:any namespace="##any" minOccurs="1" processContents="lax"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string"/>
		<xs:anyAttribute processContents="lax" namespace="##any"/>
	</xs:complexType>


	<xs:complexType name="BaseType">
		<xs:annotation>
			<xs:documentation>DAP Base Type</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Alias" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="AnyXML" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string"/>
	</xs:complexType>


	<xs:complexType name="Array">
		<xs:complexContent>
			<xs:extension base="BaseType">
				<xs:sequence>
					<xs:element name="template">
						<xs:complexType>
							<xs:choice minOccurs="1" maxOccurs="1">
								<xs:element ref="Byte"/>
								<xs:element ref="SignedByte"/>
								<xs:element ref="Int16"/>
								<xs:element ref="UInt16"/>
								<xs:element ref="Int32"/>
								<xs:element ref="UInt32"/>
								<xs:element ref="Int64"/>
								<xs:element ref="UInt64"/>
								<xs:element ref="Float32"/>
								<xs:element ref="Float64"/>
								<xs:element ref="String"/>
								<xs:element ref="Url"/>
								<xs:element ref="Structure"/>
								<xs:element ref="Opaque"/>

								<!-- Arrays of Grids and Sequences probably never worked
									 So Dennis and I decided to explicitly remove them 
									 from DAP4.Â jhrg 10/8/09 -->
								<!-- xs:element ref="Grid"/ -->
								<!-- xs:element ref="Sequence"/ -->
							</xs:choice>
						</xs:complexType>
					</xs:element>
					<xs:choice>
						<xs:element name="dimension" type="ArrayDimension" minOccurs="1"
							maxOccurs="unbounded"/>
						<xs:element ref="Map" minOccurs="1" maxOccurs="unbounded"/>
					</xs:choice>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<!-- What we want: One of these two must be present, or both -->
	<xs:complexType name="ArrayDimension">
		<xs:attribute name="name" type="xs:string"/>
		<xs:attribute name="size" type="xs:integer"/>
	</xs:complexType>


	<xs:complexType name="ArraySharedDimension">
		<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>


	<xs:simpleType name="MapValueType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Byte"/>
			<xs:enumeration value="SignedByte"/>
			<xs:enumeration value="Int16"/>
			<xs:enumeration value="UInt16"/>
			<xs:enumeration value="Int32"/>
			<xs:enumeration value="UInt32"/>
			<xs:enumeration value="Int64"/>
			<xs:enumeration value="UInt64"/>
			<xs:enumeration value="Float32"/>
			<xs:enumeration value="Float64"/>
			<xs:enumeration value="String"/>
			<xs:enumeration value="URL"/>
		</xs:restriction>
	</xs:simpleType>


	<xs:complexType name="MapType">
		<xs:annotation>
			<xs:documentation>What this does not capture is that a Map appears both at the start of
				a DAP4 Grid and must bind a name for the Map to be used within the Grid to either a
				SharedDimension or a size. However, the Map element also appears within the Array
				and there only with the name attribute. </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="Attribute" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="Alias" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="AnyXML" minOccurs="0" maxOccurs="unbounded"/>
			<!-- <xs:element ref="SharedDimension" minOccurs="0" maxOccurs="unbounded"/> -->
			<xs:element name="dimension" type="ArrayDimension" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="dim" type="xs:string"/>
		<xs:attribute name="size" type="xs:integer"/>
		<xs:attribute name="type" type="MapValueType"/>
	</xs:complexType>


	<xs:complexType name="Grid">
		<xs:complexContent>
			<xs:extension base="BaseType">
				<xs:sequence>
					<!-- Subtle change here: In DAP 3.2 and earlier, maxOccurs
						for the Array element was 1, now it's 'unbounded' and
						Maps have moved to teh top of the Grid. Not sure that 
					    change is important, but it's a wash because the 
						content has changed -->
					<xs:element ref="Map" minOccurs="1" maxOccurs="unbounded"/>
					<xs:element ref="Array" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="Structure">
		<xs:complexContent>
			<xs:extension base="BaseType">
				<xs:group ref="VariableTypes" minOccurs="1" maxOccurs="unbounded"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="Sequence">
		<xs:complexContent>
			<xs:extension base="BaseType">
				<xs:group ref="VariableTypes" minOccurs="1" maxOccurs="unbounded"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>


	<xs:complexType name="BLOB">
		<xs:attribute name="href" type="xs:string" use="required"/>
	</xs:complexType>


</xs:schema>
